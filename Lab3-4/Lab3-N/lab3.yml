---
- hosts: web
  gather_facts: no
  become: yes
  roles:
    - Nginx
  tasks:
    - name: Create directory for static files for nginx server if it does not exists
      file:
        path: "{{ nginx_root_default }}/{{ nginx_static_files_url }}"
        state: directory

    - name: Debug static files path
      debug:
        msg: "{{ nginx_root_default }}/{{ nginx_static_files_url }}"
    - name: Copy static html document
      copy:
        src: "/home/malck/DevOPs/Lab3-N/staticfiles/"
        dest: "{{ nginx_root_default }}/{{ nginx_static_files_url }}"

- hosts: app
  gather_facts: no
  become: yes
  roles:
    - Docker
  tasks:
    - name: Delete app directory
      file:
        path: "{{ app_path }}"
        state: absent

    - name: Clone remote git repository
      git:
        repo: "{{ repository }}"
        dest: "{{ app_path }}"
        force: yes
        
    - name: Copy Dockerfile to app directory
      copy:
        src: "{{ dockerfile_path }}"
        dest: "{{ app_path }}/Dockerfile"

    - name: Install Django
      pip:
        name: django
        
    - name: Install python-dotenv
      pip:
        name: python-dotenv
        
    - name: Install dj_database_url
      pip:
        name: dj_database_url

    - name: Make migrations
      command: "python3 {{ app_path }}/manage.py makemigrations"
      
    - name: Migrate
      command: "python3 {{ app_path }}/manage.py migrate"
      
    - name: Install whitenoise
      pip:
        name: whitenoise

    - name: Collect static
      command: "python3 {{ app_path }}/manage.py collectstatic --noinput"

    - name: Run the standard tests
      command: "python3 {{ app_path }}/manage.py test"

    - name: Stop instance
      shell: "sudo docker rm -f {{ docker_container_name }}"
      ignore_errors: yes

    - name: Configuration docker image
      docker_image:
        build:
          path: "{{ app_path }}"
        name: "{{ docker_image_name }}"
        state: present
        source: build

    - name: Start docker container
      shell: "sudo docker run -d -p {{ docker_container_port }}:80 --name {{ docker_container_name }} {{ docker_image_name }}:latest"
